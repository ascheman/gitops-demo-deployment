[command]/home/runner/work/_temp/cd65f80c-0e2b-48e3-9817-6c5fa2c38a65/terraform-bin plan -out plan.out -no-color
data.aws_region.current: Reading...
data.aws_caller_identity.current: Reading...
data.aws_region.current: Read complete after 0s [id=us-east-1]
data.aws_caller_identity.current: Read complete after 1s [id=942705247267]
aws_s3_bucket.this: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1]
aws_s3_object_copy.this: Refreshing state... [id=index.html]
aws_s3_bucket_website_configuration.this: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1]
aws_s3_bucket_acl.this: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1,public-read]
aws_s3_bucket_versioning.this: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1]
aws_s3_bucket_policy.bucket_policy: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1]

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
-/+ destroy and then create replacement
 <= read (data resources)

Terraform will perform the following actions:

  # data.aws_iam_policy_document.bucket_policy will be read during apply
  # (config refers to values not yet known)
 <= data "aws_iam_policy_document" "bucket_policy" {
      + id   = (known after apply)
      + json = (known after apply)

      + statement {
          + actions   = [
              + "s3:GetObject",
            ]
          + effect    = "Allow"
          + resources = [
              + (known after apply),
            ]

          + principals {
              + identifiers = [
                  + "*",
                ]
              + type        = "AWS"
            }
        }
    }

  # aws_s3_bucket.this must be replaced
-/+ resource "aws_s3_bucket" "this" {
      + acceleration_status         = (known after apply)
      + acl                         = (known after apply)
      ~ arn                         = "arn:aws:s3:::aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)
      ~ bucket                      = "aschemann-gitops-sample-942705247267-us-east-1" -> "aschemann-gitops-sample-942705247267-default-us-east-1" # forces replacement
      ~ bucket_domain_name          = "aschemann-gitops-sample-942705247267-us-east-1.s3.amazonaws.com" -> (known after apply)
      ~ bucket_regional_domain_name = "aschemann-gitops-sample-942705247267-us-east-1.s3.amazonaws.com" -> (known after apply)
      ~ hosted_zone_id              = "Z3AQBSTGFYJSTF" -> (known after apply)
      ~ id                          = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)
      ~ object_lock_enabled         = false -> (known after apply)
      ~ policy                      = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "s3:GetObject"
                      - Effect    = "Allow"
                      - Principal = {
                          - AWS = "*"
                        }
                      - Resource  = "arn:aws:s3:::aschemann-gitops-sample-942705247267-us-east-1/*"
                      - Sid       = ""
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
      ~ region                      = "us-east-1" -> (known after apply)
      ~ request_payer               = "BucketOwner" -> (known after apply)
      ~ tags                        = {
          ~ "Version"    = "v1" -> "init"
            # (1 unchanged element hidden)
        }
      ~ tags_all                    = {
          ~ "Version"    = "v1" -> "init"
            # (1 unchanged element hidden)
        }
      ~ website_domain              = "s3-website-us-east-1.amazonaws.com" -> (known after apply)
      ~ website_endpoint            = "aschemann-gitops-sample-942705247267-us-east-1.s3-website-us-east-1.amazonaws.com" -> (known after apply)
        # (1 unchanged attribute hidden)

      + cors_rule {
          + allowed_headers = (known after apply)
          + allowed_methods = (known after apply)
          + allowed_origins = (known after apply)
          + expose_headers  = (known after apply)
          + max_age_seconds = (known after apply)
        }

      - grant {
          - permissions = [
              - "READ",
            ] -> null
          - type        = "Group" -> null
          - uri         = "http://acs.amazonaws.com/groups/global/AllUsers" -> null
        }
      - grant {
          - id          = "84c2362353b4a53919791de2c3ff83ffbe015719bed950399084ab955701196f" -> null
          - permissions = [
              - "FULL_CONTROL",
            ] -> null
          - type        = "CanonicalUser" -> null
        }
      + grant {
          + id          = (known after apply)
          + permissions = (known after apply)
          + type        = (known after apply)
          + uri         = (known after apply)
        }

      + lifecycle_rule {
          + abort_incomplete_multipart_upload_days = (known after apply)
          + enabled                                = (known after apply)
          + id                                     = (known after apply)
          + prefix                                 = (known after apply)
          + tags                                   = (known after apply)

          + expiration {
              + date                         = (known after apply)
              + days                         = (known after apply)
              + expired_object_delete_marker = (known after apply)
            }

          + noncurrent_version_expiration {
              + days = (known after apply)
            }

          + noncurrent_version_transition {
              + days          = (known after apply)
              + storage_class = (known after apply)
            }

          + transition {
              + date          = (known after apply)
              + days          = (known after apply)
              + storage_class = (known after apply)
            }
        }

      + logging {
          + target_bucket = (known after apply)
          + target_prefix = (known after apply)
        }

      + object_lock_configuration {
          + object_lock_enabled = (known after apply)

          + rule {
              + default_retention {
                  + days  = (known after apply)
                  + mode  = (known after apply)
                  + years = (known after apply)
                }
            }
        }

      + replication_configuration {
          + role = (known after apply)

          + rules {
              + delete_marker_replication_status = (known after apply)
              + id                               = (known after apply)
              + prefix                           = (known after apply)
              + priority                         = (known after apply)
              + status                           = (known after apply)

              + destination {
                  + account_id         = (known after apply)
                  + bucket             = (known after apply)
                  + replica_kms_key_id = (known after apply)
                  + storage_class      = (known after apply)

                  + access_control_translation {
                      + owner = (known after apply)
                    }

                  + metrics {
                      + minutes = (known after apply)
                      + status  = (known after apply)
                    }

                  + replication_time {
                      + minutes = (known after apply)
                      + status  = (known after apply)
                    }
                }

              + filter {
                  + prefix = (known after apply)
                  + tags   = (known after apply)
                }

              + source_selection_criteria {
                  + sse_kms_encrypted_objects {
                      + enabled = (known after apply)
                    }
                }
            }
        }

      + server_side_encryption_configuration {
          + rule {
              + bucket_key_enabled = (known after apply)

              + apply_server_side_encryption_by_default {
                  + kms_master_key_id = (known after apply)
                  + sse_algorithm     = (known after apply)
                }
            }
        }

      ~ versioning {
          ~ enabled    = true -> (known after apply)
          ~ mfa_delete = false -> (known after apply)
        }

      ~ website {
          + error_document           = (known after apply)
          ~ index_document           = "index.html" -> (known after apply)
          + redirect_all_requests_to = (known after apply)
          + routing_rules            = (known after apply)
        }
    }

  # aws_s3_bucket_acl.this must be replaced
-/+ resource "aws_s3_bucket_acl" "this" {
      ~ bucket = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement
      ~ id     = "aschemann-gitops-sample-942705247267-us-east-1,public-read" -> (known after apply)
        # (1 unchanged attribute hidden)

      ~ access_control_policy {
          - grant {
              - permission = "READ" -> null

              - grantee {
                  - type = "Group" -> null
                  - uri  = "http://acs.amazonaws.com/groups/global/AllUsers" -> null
                }
            }
          - grant {
              - permission = "FULL_CONTROL" -> null

              - grantee {
                  - display_name = "aws-test0" -> null
                  - id           = "84c2362353b4a53919791de2c3ff83ffbe015719bed950399084ab955701196f" -> null
                  - type         = "CanonicalUser" -> null
                }
            }
          + grant {
              + permission = (known after apply)

              + grantee {
                  + display_name  = (known after apply)
                  + email_address = (known after apply)
                  + id            = (known after apply)
                  + type          = (known after apply)
                  + uri           = (known after apply)
                }
            }

          ~ owner {
              ~ display_name = "aws-test0" -> (known after apply)
              ~ id           = "84c2362353b4a53919791de2c3ff83ffbe015719bed950399084ab955701196f" -> (known after apply)
            }
        }
    }

  # aws_s3_bucket_policy.bucket_policy must be replaced
-/+ resource "aws_s3_bucket_policy" "bucket_policy" {
      ~ bucket = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement
      ~ id     = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)
      ~ policy = jsonencode(
            {
              - Statement = [
                  - {
                      - Action    = "s3:GetObject"
                      - Effect    = "Allow"
                      - Principal = {
                          - AWS = "*"
                        }
                      - Resource  = "arn:aws:s3:::aschemann-gitops-sample-942705247267-us-east-1/*"
                      - Sid       = ""
                    },
                ]
              - Version   = "2012-10-17"
            }
        ) -> (known after apply)
    }

  # aws_s3_bucket_versioning.this must be replaced
-/+ resource "aws_s3_bucket_versioning" "this" {
      ~ bucket = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement
      ~ id     = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)

      ~ versioning_configuration {
          + mfa_delete = (known after apply)
            # (1 unchanged attribute hidden)
        }
    }

  # aws_s3_bucket_website_configuration.this must be replaced
-/+ resource "aws_s3_bucket_website_configuration" "this" {
      ~ bucket           = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement
      ~ id               = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)
      + routing_rules    = (known after apply)
      ~ website_domain   = "s3-website-us-east-1.amazonaws.com" -> (known after apply)
      ~ website_endpoint = "aschemann-gitops-sample-942705247267-us-east-1.s3-website-us-east-1.amazonaws.com" -> (known after apply)

      + routing_rule {
          + condition {
              + http_error_code_returned_equals = (known after apply)
              + key_prefix_equals               = (known after apply)
            }

          + redirect {
              + host_name               = (known after apply)
              + http_redirect_code      = (known after apply)
              + protocol                = (known after apply)
              + replace_key_prefix_with = (known after apply)
              + replace_key_with        = (known after apply)
            }
        }

        # (1 unchanged block hidden)
    }

  # aws_s3_object_copy.this must be replaced
-/+ resource "aws_s3_object_copy" "this" {
      ~ bucket                        = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement
      ~ bucket_key_enabled            = false -> (known after apply)
      + cache_control                 = (known after apply)
      + content_disposition           = (known after apply)
      + content_encoding              = (known after apply)
      + content_language              = (known after apply)
      + customer_algorithm            = (known after apply)
      + customer_key_md5              = (known after apply)
      ~ etag                          = "fffe535412d786a454705dbf3ba66c0a" -> (known after apply)
      + expiration                    = (known after apply)
      ~ id                            = "index.html" -> (known after apply)
      + kms_encryption_context        = (sensitive value)
      + kms_key_id                    = (sensitive value)
      ~ last_modified                 = "2022-10-10T07:23:51Z" -> (known after apply)
      ~ metadata                      = {} -> (known after apply)
      + object_lock_legal_hold_status = (known after apply)
      + object_lock_mode              = (known after apply)
      + object_lock_retain_until_date = (known after apply)
      ~ request_charged               = false -> (known after apply)
      + server_side_encryption        = (known after apply)
      ~ source                        = "aschemann-gitops-sample-repository-942705247267-us-east-1/index-v1.html" -> "aschemann-gitops-sample-repository-942705247267-us-east-1/index-init.html" # forces replacement
      ~ source_version_id             = "N4XuvVtiunNdSLoF.GojcMMqS0nh2Snv" -> (known after apply)
      ~ storage_class                 = "STANDARD" -> (known after apply)
      - tags                          = {} -> null
      ~ tags_all                      = {} -> (known after apply)
      ~ version_id                    = "hwwVUBbJQwhxBUdj.OOPn82Jwc6.gZxU" -> (known after apply)
      + website_redirect              = (known after apply)
        # (4 unchanged attributes hidden)
    }

Plan: 6 to add, 0 to change, 6 to destroy.

─────────────────────────────────────────────────────────────────────────────

Saved the plan to: plan.out

To perform exactly these actions, run the following command to apply:
    terraform apply "plan.out"
::debug::Terraform exited with code 0.
::debug::stdout: data.aws_region.current: Reading...%0Adata.aws_caller_identity.current: Reading...%0Adata.aws_region.current: Read complete after 0s [id=us-east-1]%0Adata.aws_caller_identity.current: Read complete after 1s [id=942705247267]%0Aaws_s3_bucket.this: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1]%0Aaws_s3_object_copy.this: Refreshing state... [id=index.html]%0Aaws_s3_bucket_website_configuration.this: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1]%0Aaws_s3_bucket_acl.this: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1,public-read]%0Aaws_s3_bucket_versioning.this: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1]%0Aaws_s3_bucket_policy.bucket_policy: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1]%0A%0ATerraform used the selected providers to generate the following execution%0Aplan. Resource actions are indicated with the following symbols:%0A-/+ destroy and then create replacement%0A <= read (data resources)%0A%0ATerraform will perform the following actions:%0A%0A  # data.aws_iam_policy_document.bucket_policy will be read during apply%0A  # (config refers to values not yet known)%0A <= data "aws_iam_policy_document" "bucket_policy" {%0A      + id   = (known after apply)%0A      + json = (known after apply)%0A%0A      + statement {%0A          + actions   = [%0A              + "s3:GetObject",%0A            ]%0A          + effect    = "Allow"%0A          + resources = [%0A              + (known after apply),%0A            ]%0A%0A          + principals {%0A              + identifiers = [%0A                  + "*",%0A                ]%0A              + type        = "AWS"%0A            }%0A        }%0A    }%0A%0A  # aws_s3_bucket.this must be replaced%0A-/+ resource "aws_s3_bucket" "this" {%0A      + acceleration_status         = (known after apply)%0A      + acl                         = (known after apply)%0A      ~ arn                         = "arn:aws:s3:::aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)%0A      ~ bucket                      = "aschemann-gitops-sample-942705247267-us-east-1" -> "aschemann-gitops-sample-942705247267-default-us-east-1" # forces replacement%0A      ~ bucket_domain_name          = "aschemann-gitops-sample-942705247267-us-east-1.s3.amazonaws.com" -> (known after apply)%0A      ~ bucket_regional_domain_name = "aschemann-gitops-sample-942705247267-us-east-1.s3.amazonaws.com" -> (known after apply)%0A      ~ hosted_zone_id              = "Z3AQBSTGFYJSTF" -> (known after apply)%0A      ~ id                          = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)%0A      ~ object_lock_enabled         = false -> (known after apply)%0A      ~ policy                      = jsonencode(%0A            {%0A              - Statement = [%0A                  - {%0A                      - Action    = "s3:GetObject"%0A                      - Effect    = "Allow"%0A                      - Principal = {%0A                          - AWS = "*"%0A                        }%0A                      - Resource  = "arn:aws:s3:::aschemann-gitops-sample-942705247267-us-east-1/*"%0A                      - Sid       = ""%0A                    },%0A                ]%0A              - Version   = "2012-10-17"%0A            }%0A        ) -> (known after apply)%0A      ~ region                      = "us-east-1" -> (known after apply)%0A      ~ request_payer               = "BucketOwner" -> (known after apply)%0A      ~ tags                        = {%0A          ~ "Version"    = "v1" -> "init"%0A            # (1 unchanged element hidden)%0A        }%0A      ~ tags_all                    = {%0A          ~ "Version"    = "v1" -> "init"%0A            # (1 unchanged element hidden)%0A        }%0A      ~ website_domain              = "s3-website-us-east-1.amazonaws.com" -> (known after apply)%0A      ~ website_endpoint            = "aschemann-gitops-sample-942705247267-us-east-1.s3-website-us-east-1.amazonaws.com" -> (known after apply)%0A        # (1 unchanged attribute hidden)%0A%0A      + cors_rule {%0A          + allowed_headers = (known after apply)%0A          + allowed_methods = (known after apply)%0A          + allowed_origins = (known after apply)%0A          + expose_headers  = (known after apply)%0A          + max_age_seconds = (known after apply)%0A        }%0A%0A      - grant {%0A          - permissions = [%0A              - "READ",%0A            ] -> null%0A          - type        = "Group" -> null%0A          - uri         = "http://acs.amazonaws.com/groups/global/AllUsers" -> null%0A        }%0A      - grant {%0A          - id          = "84c2362353b4a53919791de2c3ff83ffbe015719bed950399084ab955701196f" -> null%0A          - permissions = [%0A              - "FULL_CONTROL",%0A            ] -> null%0A          - type        = "CanonicalUser" -> null%0A        }%0A      + grant {%0A          + id          = (known after apply)%0A          + permissions = (known after apply)%0A          + type        = (known after apply)%0A          + uri         = (known after apply)%0A        }%0A%0A      + lifecycle_rule {%0A          + abort_incomplete_multipart_upload_days = (known after apply)%0A          + enabled                                = (known after apply)%0A          + id                                     = (known after apply)%0A          + prefix                                 = (known after apply)%0A          + tags                                   = (known after apply)%0A%0A          + expiration {%0A              + date                         = (known after apply)%0A              + days                         = (known after apply)%0A              + expired_object_delete_marker = (known after apply)%0A            }%0A%0A          + noncurrent_version_expiration {%0A              + days = (known after apply)%0A            }%0A%0A          + noncurrent_version_transition {%0A              + days          = (known after apply)%0A              + storage_class = (known after apply)%0A            }%0A%0A          + transition {%0A              + date          = (known after apply)%0A              + days          = (known after apply)%0A              + storage_class = (known after apply)%0A            }%0A        }%0A%0A      + logging {%0A          + target_bucket = (known after apply)%0A          + target_prefix = (known after apply)%0A        }%0A%0A      + object_lock_configuration {%0A          + object_lock_enabled = (known after apply)%0A%0A          + rule {%0A              + default_retention {%0A                  + days  = (known after apply)%0A                  + mode  = (known after apply)%0A                  + years = (known after apply)%0A                }%0A            }%0A        }%0A%0A      + replication_configuration {%0A          + role = (known after apply)%0A%0A          + rules {%0A              + delete_marker_replication_status = (known after apply)%0A              + id                               = (known after apply)%0A              + prefix                           = (known after apply)%0A              + priority                         = (known after apply)%0A              + status                           = (known after apply)%0A%0A              + destination {%0A                  + account_id         = (known after apply)%0A                  + bucket             = (known after apply)%0A                  + replica_kms_key_id = (known after apply)%0A                  + storage_class      = (known after apply)%0A%0A                  + access_control_translation {%0A                      + owner = (known after apply)%0A                    }%0A%0A                  + metrics {%0A                      + minutes = (known after apply)%0A                      + status  = (known after apply)%0A                    }%0A%0A                  + replication_time {%0A                      + minutes = (known after apply)%0A                      + status  = (known after apply)%0A                    }%0A                }%0A%0A              + filter {%0A                  + prefix = (known after apply)%0A                  + tags   = (known after apply)%0A                }%0A%0A              + source_selection_criteria {%0A                  + sse_kms_encrypted_objects {%0A                      + enabled = (known after apply)%0A                    }%0A                }%0A            }%0A        }%0A%0A      + server_side_encryption_configuration {%0A          + rule {%0A              + bucket_key_enabled = (known after apply)%0A%0A              + apply_server_side_encryption_by_default {%0A                  + kms_master_key_id = (known after apply)%0A                  + sse_algorithm     = (known after apply)%0A                }%0A            }%0A        }%0A%0A      ~ versioning {%0A          ~ enabled    = true -> (known after apply)%0A          ~ mfa_delete = false -> (known after apply)%0A        }%0A%0A      ~ website {%0A          + error_document           = (known after apply)%0A          ~ index_document           = "index.html" -> (known after apply)%0A          + redirect_all_requests_to = (known after apply)%0A          + routing_rules            = (known after apply)%0A        }%0A    }%0A%0A  # aws_s3_bucket_acl.this must be replaced%0A-/+ resource "aws_s3_bucket_acl" "this" {%0A      ~ bucket = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement%0A      ~ id     = "aschemann-gitops-sample-942705247267-us-east-1,public-read" -> (known after apply)%0A        # (1 unchanged attribute hidden)%0A%0A      ~ access_control_policy {%0A          - grant {%0A              - permission = "READ" -> null%0A%0A              - grantee {%0A                  - type = "Group" -> null%0A                  - uri  = "http://acs.amazonaws.com/groups/global/AllUsers" -> null%0A                }%0A            }%0A          - grant {%0A              - permission = "FULL_CONTROL" -> null%0A%0A              - grantee {%0A                  - display_name = "aws-test0" -> null%0A                  - id           = "84c2362353b4a53919791de2c3ff83ffbe015719bed950399084ab955701196f" -> null%0A                  - type         = "CanonicalUser" -> null%0A                }%0A            }%0A          + grant {%0A              + permission = (known after apply)%0A%0A              + grantee {%0A                  + display_name  = (known after apply)%0A                  + email_address = (known after apply)%0A                  + id            = (known after apply)%0A                  + type          = (known after apply)%0A                  + uri           = (known after apply)%0A                }%0A            }%0A%0A          ~ owner {%0A              ~ display_name = "aws-test0" -> (known after apply)%0A              ~ id           = "84c2362353b4a53919791de2c3ff83ffbe015719bed950399084ab955701196f" -> (known after apply)%0A            }%0A        }%0A    }%0A%0A  # aws_s3_bucket_policy.bucket_policy must be replaced%0A-/+ resource "aws_s3_bucket_policy" "bucket_policy" {%0A      ~ bucket = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement%0A      ~ id     = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)%0A      ~ policy = jsonencode(%0A            {%0A              - Statement = [%0A                  - {%0A                      - Action    = "s3:GetObject"%0A                      - Effect    = "Allow"%0A                      - Principal = {%0A                          - AWS = "*"%0A                        }%0A                      - Resource  = "arn:aws:s3:::aschemann-gitops-sample-942705247267-us-east-1/*"%0A                      - Sid       = ""%0A                    },%0A                ]%0A              - Version   = "2012-10-17"%0A            }%0A        ) -> (known after apply)%0A    }%0A%0A  # aws_s3_bucket_versioning.this must be replaced%0A-/+ resource "aws_s3_bucket_versioning" "this" {%0A      ~ bucket = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement%0A      ~ id     = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)%0A%0A      ~ versioning_configuration {%0A          + mfa_delete = (known after apply)%0A            # (1 unchanged attribute hidden)%0A        }%0A    }%0A%0A  # aws_s3_bucket_website_configuration.this must be replaced%0A-/+ resource "aws_s3_bucket_website_configuration" "this" {%0A      ~ bucket           = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement%0A      ~ id               = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)%0A      + routing_rules    = (known after apply)%0A      ~ website_domain   = "s3-website-us-east-1.amazonaws.com" -> (known after apply)%0A      ~ website_endpoint = "aschemann-gitops-sample-942705247267-us-east-1.s3-website-us-east-1.amazonaws.com" -> (known after apply)%0A%0A      + routing_rule {%0A          + condition {%0A              + http_error_code_returned_equals = (known after apply)%0A              + key_prefix_equals               = (known after apply)%0A            }%0A%0A          + redirect {%0A              + host_name               = (known after apply)%0A              + http_redirect_code      = (known after apply)%0A              + protocol                = (known after apply)%0A              + replace_key_prefix_with = (known after apply)%0A              + replace_key_with        = (known after apply)%0A            }%0A        }%0A%0A        # (1 unchanged block hidden)%0A    }%0A%0A  # aws_s3_object_copy.this must be replaced%0A-/+ resource "aws_s3_object_copy" "this" {%0A      ~ bucket                        = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement%0A      ~ bucket_key_enabled            = false -> (known after apply)%0A      + cache_control                 = (known after apply)%0A      + content_disposition           = (known after apply)%0A      + content_encoding              = (known after apply)%0A      + content_language              = (known after apply)%0A      + customer_algorithm            = (known after apply)%0A      + customer_key_md5              = (known after apply)%0A      ~ etag                          = "fffe535412d786a454705dbf3ba66c0a" -> (known after apply)%0A      + expiration                    = (known after apply)%0A      ~ id                            = "index.html" -> (known after apply)%0A      + kms_encryption_context        = (sensitive value)%0A      + kms_key_id                    = (sensitive value)%0A      ~ last_modified                 = "2022-10-10T07:23:51Z" -> (known after apply)%0A      ~ metadata                      = {} -> (known after apply)%0A      + object_lock_legal_hold_status = (known after apply)%0A      + object_lock_mode              = (known after apply)%0A      + object_lock_retain_until_date = (known after apply)%0A      ~ request_charged               = false -> (known after apply)%0A      + server_side_encryption        = (known after apply)%0A      ~ source                        = "aschemann-gitops-sample-repository-942705247267-us-east-1/index-v1.html" -> "aschemann-gitops-sample-repository-942705247267-us-east-1/index-init.html" # forces replacement%0A      ~ source_version_id             = "N4XuvVtiunNdSLoF.GojcMMqS0nh2Snv" -> (known after apply)%0A      ~ storage_class                 = "STANDARD" -> (known after apply)%0A      - tags                          = {} -> null%0A      ~ tags_all                      = {} -> (known after apply)%0A      ~ version_id                    = "hwwVUBbJQwhxBUdj.OOPn82Jwc6.gZxU" -> (known after apply)%0A      + website_redirect              = (known after apply)%0A        # (4 unchanged attributes hidden)%0A    }%0A%0APlan: 6 to add, 0 to change, 6 to destroy.%0A%0A─────────────────────────────────────────────────────────────────────────────%0A%0ASaved the plan to: plan.out%0A%0ATo perform exactly these actions, run the following command to apply:%0A    terraform apply "plan.out"%0A
::debug::stderr: 
::debug::exitcode: 0

::set-output name=stdout::data.aws_region.current: Reading...%0Adata.aws_caller_identity.current: Reading...%0Adata.aws_region.current: Read complete after 0s [id=us-east-1]%0Adata.aws_caller_identity.current: Read complete after 1s [id=942705247267]%0Aaws_s3_bucket.this: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1]%0Aaws_s3_object_copy.this: Refreshing state... [id=index.html]%0Aaws_s3_bucket_website_configuration.this: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1]%0Aaws_s3_bucket_acl.this: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1,public-read]%0Aaws_s3_bucket_versioning.this: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1]%0Aaws_s3_bucket_policy.bucket_policy: Refreshing state... [id=aschemann-gitops-sample-942705247267-us-east-1]%0A%0ATerraform used the selected providers to generate the following execution%0Aplan. Resource actions are indicated with the following symbols:%0A-/+ destroy and then create replacement%0A <= read (data resources)%0A%0ATerraform will perform the following actions:%0A%0A  # data.aws_iam_policy_document.bucket_policy will be read during apply%0A  # (config refers to values not yet known)%0A <= data "aws_iam_policy_document" "bucket_policy" {%0A      + id   = (known after apply)%0A      + json = (known after apply)%0A%0A      + statement {%0A          + actions   = [%0A              + "s3:GetObject",%0A            ]%0A          + effect    = "Allow"%0A          + resources = [%0A              + (known after apply),%0A            ]%0A%0A          + principals {%0A              + identifiers = [%0A                  + "*",%0A                ]%0A              + type        = "AWS"%0A            }%0A        }%0A    }%0A%0A  # aws_s3_bucket.this must be replaced%0A-/+ resource "aws_s3_bucket" "this" {%0A      + acceleration_status         = (known after apply)%0A      + acl                         = (known after apply)%0A      ~ arn                         = "arn:aws:s3:::aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)%0A      ~ bucket                      = "aschemann-gitops-sample-942705247267-us-east-1" -> "aschemann-gitops-sample-942705247267-default-us-east-1" # forces replacement%0A      ~ bucket_domain_name          = "aschemann-gitops-sample-942705247267-us-east-1.s3.amazonaws.com" -> (known after apply)%0A      ~ bucket_regional_domain_name = "aschemann-gitops-sample-942705247267-us-east-1.s3.amazonaws.com" -> (known after apply)%0A      ~ hosted_zone_id              = "Z3AQBSTGFYJSTF" -> (known after apply)%0A      ~ id                          = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)%0A      ~ object_lock_enabled         = false -> (known after apply)%0A      ~ policy                      = jsonencode(%0A            {%0A              - Statement = [%0A                  - {%0A                      - Action    = "s3:GetObject"%0A                      - Effect    = "Allow"%0A                      - Principal = {%0A                          - AWS = "*"%0A                        }%0A                      - Resource  = "arn:aws:s3:::aschemann-gitops-sample-942705247267-us-east-1/*"%0A                      - Sid       = ""%0A                    },%0A                ]%0A              - Version   = "2012-10-17"%0A            }%0A        ) -> (known after apply)%0A      ~ region                      = "us-east-1" -> (known after apply)%0A      ~ request_payer               = "BucketOwner" -> (known after apply)%0A      ~ tags                        = {%0A          ~ "Version"    = "v1" -> "init"%0A            # (1 unchanged element hidden)%0A        }%0A      ~ tags_all                    = {%0A          ~ "Version"    = "v1" -> "init"%0A            # (1 unchanged element hidden)%0A        }%0A      ~ website_domain              = "s3-website-us-east-1.amazonaws.com" -> (known after apply)%0A      ~ website_endpoint            = "aschemann-gitops-sample-942705247267-us-east-1.s3-website-us-east-1.amazonaws.com" -> (known after apply)%0A        # (1 unchanged attribute hidden)%0A%0A      + cors_rule {%0A          + allowed_headers = (known after apply)%0A          + allowed_methods = (known after apply)%0A          + allowed_origins = (known after apply)%0A          + expose_headers  = (known after apply)%0A          + max_age_seconds = (known after apply)%0A        }%0A%0A      - grant {%0A          - permissions = [%0A              - "READ",%0A            ] -> null%0A          - type        = "Group" -> null%0A          - uri         = "http://acs.amazonaws.com/groups/global/AllUsers" -> null%0A        }%0A      - grant {%0A          - id          = "84c2362353b4a53919791de2c3ff83ffbe015719bed950399084ab955701196f" -> null%0A          - permissions = [%0A              - "FULL_CONTROL",%0A            ] -> null%0A          - type        = "CanonicalUser" -> null%0A        }%0A      + grant {%0A          + id          = (known after apply)%0A          + permissions = (known after apply)%0A          + type        = (known after apply)%0A          + uri         = (known after apply)%0A        }%0A%0A      + lifecycle_rule {%0A          + abort_incomplete_multipart_upload_days = (known after apply)%0A          + enabled                                = (known after apply)%0A          + id                                     = (known after apply)%0A          + prefix                                 = (known after apply)%0A          + tags                                   = (known after apply)%0A%0A          + expiration {%0A              + date                         = (known after apply)%0A              + days                         = (known after apply)%0A              + expired_object_delete_marker = (known after apply)%0A            }%0A%0A          + noncurrent_version_expiration {%0A              + days = (known after apply)%0A            }%0A%0A          + noncurrent_version_transition {%0A              + days          = (known after apply)%0A              + storage_class = (known after apply)%0A            }%0A%0A          + transition {%0A              + date          = (known after apply)%0A              + days          = (known after apply)%0A              + storage_class = (known after apply)%0A            }%0A        }%0A%0A      + logging {%0A          + target_bucket = (known after apply)%0A          + target_prefix = (known after apply)%0A        }%0A%0A      + object_lock_configuration {%0A          + object_lock_enabled = (known after apply)%0A%0A          + rule {%0A              + default_retention {%0A                  + days  = (known after apply)%0A                  + mode  = (known after apply)%0A                  + years = (known after apply)%0A                }%0A            }%0A        }%0A%0A      + replication_configuration {%0A          + role = (known after apply)%0A%0A          + rules {%0A              + delete_marker_replication_status = (known after apply)%0A              + id                               = (known after apply)%0A              + prefix                           = (known after apply)%0A              + priority                         = (known after apply)%0A              + status                           = (known after apply)%0A%0A              + destination {%0A                  + account_id         = (known after apply)%0A                  + bucket             = (known after apply)%0A                  + replica_kms_key_id = (known after apply)%0A                  + storage_class      = (known after apply)%0A%0A                  + access_control_translation {%0A                      + owner = (known after apply)%0A                    }%0A%0A                  + metrics {%0A                      + minutes = (known after apply)%0A                      + status  = (known after apply)%0A                    }%0A%0A                  + replication_time {%0A                      + minutes = (known after apply)%0A                      + status  = (known after apply)%0A                    }%0A                }%0A%0A              + filter {%0A                  + prefix = (known after apply)%0A                  + tags   = (known after apply)%0A                }%0A%0A              + source_selection_criteria {%0A                  + sse_kms_encrypted_objects {%0A                      + enabled = (known after apply)%0A                    }%0A                }%0A            }%0A        }%0A%0A      + server_side_encryption_configuration {%0A          + rule {%0A              + bucket_key_enabled = (known after apply)%0A%0A              + apply_server_side_encryption_by_default {%0A                  + kms_master_key_id = (known after apply)%0A                  + sse_algorithm     = (known after apply)%0A                }%0A            }%0A        }%0A%0A      ~ versioning {%0A          ~ enabled    = true -> (known after apply)%0A          ~ mfa_delete = false -> (known after apply)%0A        }%0A%0A      ~ website {%0A          + error_document           = (known after apply)%0A          ~ index_document           = "index.html" -> (known after apply)%0A          + redirect_all_requests_to = (known after apply)%0A          + routing_rules            = (known after apply)%0A        }%0A    }%0A%0A  # aws_s3_bucket_acl.this must be replaced%0A-/+ resource "aws_s3_bucket_acl" "this" {%0A      ~ bucket = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement%0A      ~ id     = "aschemann-gitops-sample-942705247267-us-east-1,public-read" -> (known after apply)%0A        # (1 unchanged attribute hidden)%0A%0A      ~ access_control_policy {%0A          - grant {%0A              - permission = "READ" -> null%0A%0A              - grantee {%0A                  - type = "Group" -> null%0A                  - uri  = "http://acs.amazonaws.com/groups/global/AllUsers" -> null%0A                }%0A            }%0A          - grant {%0A              - permission = "FULL_CONTROL" -> null%0A%0A              - grantee {%0A                  - display_name = "aws-test0" -> null%0A                  - id           = "84c2362353b4a53919791de2c3ff83ffbe015719bed950399084ab955701196f" -> null%0A                  - type         = "CanonicalUser" -> null%0A                }%0A            }%0A          + grant {%0A              + permission = (known after apply)%0A%0A              + grantee {%0A                  + display_name  = (known after apply)%0A                  + email_address = (known after apply)%0A                  + id            = (known after apply)%0A                  + type          = (known after apply)%0A                  + uri           = (known after apply)%0A                }%0A            }%0A%0A          ~ owner {%0A              ~ display_name = "aws-test0" -> (known after apply)%0A              ~ id           = "84c2362353b4a53919791de2c3ff83ffbe015719bed950399084ab955701196f" -> (known after apply)%0A            }%0A        }%0A    }%0A%0A  # aws_s3_bucket_policy.bucket_policy must be replaced%0A-/+ resource "aws_s3_bucket_policy" "bucket_policy" {%0A      ~ bucket = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement%0A      ~ id     = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)%0A      ~ policy = jsonencode(%0A            {%0A              - Statement = [%0A                  - {%0A                      - Action    = "s3:GetObject"%0A                      - Effect    = "Allow"%0A                      - Principal = {%0A                          - AWS = "*"%0A                        }%0A                      - Resource  = "arn:aws:s3:::aschemann-gitops-sample-942705247267-us-east-1/*"%0A                      - Sid       = ""%0A                    },%0A                ]%0A              - Version   = "2012-10-17"%0A            }%0A        ) -> (known after apply)%0A    }%0A%0A  # aws_s3_bucket_versioning.this must be replaced%0A-/+ resource "aws_s3_bucket_versioning" "this" {%0A      ~ bucket = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement%0A      ~ id     = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)%0A%0A      ~ versioning_configuration {%0A          + mfa_delete = (known after apply)%0A            # (1 unchanged attribute hidden)%0A        }%0A    }%0A%0A  # aws_s3_bucket_website_configuration.this must be replaced%0A-/+ resource "aws_s3_bucket_website_configuration" "this" {%0A      ~ bucket           = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement%0A      ~ id               = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply)%0A      + routing_rules    = (known after apply)%0A      ~ website_domain   = "s3-website-us-east-1.amazonaws.com" -> (known after apply)%0A      ~ website_endpoint = "aschemann-gitops-sample-942705247267-us-east-1.s3-website-us-east-1.amazonaws.com" -> (known after apply)%0A%0A      + routing_rule {%0A          + condition {%0A              + http_error_code_returned_equals = (known after apply)%0A              + key_prefix_equals               = (known after apply)%0A            }%0A%0A          + redirect {%0A              + host_name               = (known after apply)%0A              + http_redirect_code      = (known after apply)%0A              + protocol                = (known after apply)%0A              + replace_key_prefix_with = (known after apply)%0A              + replace_key_with        = (known after apply)%0A            }%0A        }%0A%0A        # (1 unchanged block hidden)%0A    }%0A%0A  # aws_s3_object_copy.this must be replaced%0A-/+ resource "aws_s3_object_copy" "this" {%0A      ~ bucket                        = "aschemann-gitops-sample-942705247267-us-east-1" -> (known after apply) # forces replacement%0A      ~ bucket_key_enabled            = false -> (known after apply)%0A      + cache_control                 = (known after apply)%0A      + content_disposition           = (known after apply)%0A      + content_encoding              = (known after apply)%0A      + content_language              = (known after apply)%0A      + customer_algorithm            = (known after apply)%0A      + customer_key_md5              = (known after apply)%0A      ~ etag                          = "fffe535412d786a454705dbf3ba66c0a" -> (known after apply)%0A      + expiration                    = (known after apply)%0A      ~ id                            = "index.html" -> (known after apply)%0A      + kms_encryption_context        = (sensitive value)%0A      + kms_key_id                    = (sensitive value)%0A      ~ last_modified                 = "2022-10-10T07:23:51Z" -> (known after apply)%0A      ~ metadata                      = {} -> (known after apply)%0A      + object_lock_legal_hold_status = (known after apply)%0A      + object_lock_mode              = (known after apply)%0A      + object_lock_retain_until_date = (known after apply)%0A      ~ request_charged               = false -> (known after apply)%0A      + server_side_encryption        = (known after apply)%0A      ~ source                        = "aschemann-gitops-sample-repository-942705247267-us-east-1/index-v1.html" -> "aschemann-gitops-sample-repository-942705247267-us-east-1/index-init.html" # forces replacement%0A      ~ source_version_id             = "N4XuvVtiunNdSLoF.GojcMMqS0nh2Snv" -> (known after apply)%0A      ~ storage_class                 = "STANDARD" -> (known after apply)%0A      - tags                          = {} -> null%0A      ~ tags_all                      = {} -> (known after apply)%0A      ~ version_id                    = "hwwVUBbJQwhxBUdj.OOPn82Jwc6.gZxU" -> (known after apply)%0A      + website_redirect              = (known after apply)%0A        # (4 unchanged attributes hidden)%0A    }%0A%0APlan: 6 to add, 0 to change, 6 to destroy.%0A%0A─────────────────────────────────────────────────────────────────────────────%0A%0ASaved the plan to: plan.out%0A%0ATo perform exactly these actions, run the following command to apply:%0A    terraform apply "plan.out"%0A

::set-output name=stderr::

::set-output name=exitcode::0
