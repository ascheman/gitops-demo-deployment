name: 'GitOps Perform'

on:
  push:
    branches: [ "perform/**" ]
  workflow_dispatch: {}

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  GIT_COMMITTER_NAME: "GitHub Action"
  GIT_COMMITTER_EMAIL: "github@acme.com"
  GIT_AUTHOR_NAME: "GitHub Action"
  GIT_AUTHOR_EMAIL: "github@acme.com"

jobs:
  checkplan:
    name: "Check Terraform Plan"
    runs-on: ubuntu-latest
    environment: production
    # FIXME: set-output is deprecated (cf. https://github.blog/changelog/2022-10-11-github-actions-deprecating-save-state-and-set-output-commands/)
    outputs:
      run_terraform: ${{ steps.terraform_plan_exists.outputs.run_terraform }}
    steps:
      # Check if a plan exists and abort otherwise
      - name: Check Plan
        id: terraform_plan_exists
        run: |
          if test -r "plan.out"; then
            echo "::set-output name=run_terraform::true"
          else
            echo "No Terraform Plan exists (stopping here)!" >&2
            echo "::set-output name=run_terraform::false"
          fi

  terraform:
    name: 'Terraform'
    needs: [checkplan]
    if: needs.checkplan.outputs.run_terraform == 'true'

    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2

      # Compute desired Terraform workspace
    - name: Compute Terraform Workspace
      run: echo TERRAFORM_WORKSPACE=$(echo "${{ github.ref_name }}" | awk -F/ '{print $2}') >> $GITHUB_ENV

      # Initialize Terraform, compute plan wrt. current state, and commit plan/log to prepare pull-request
    - name: Terraform Init
      run: scripts/terraform-init "${{ env.TERRAFORM_WORKSPACE }}"
    - name: Terraform Apply
      run: scripts/terraform-apply
    - name: Finalize PR
      run: git rm -f plan.out plan.log && git commit -m"Applied the computed Terraform plan" && git push


